/**
 * File for main
 *
 * @author    Denis Tatarnikov <tatarnikovda@gmail.com>
 */

/* 
* This is called when application load. 
* It contains application specific initializations. 
*/
application.onAppStart = function()
{
	// Logging
	trace("Starting VM Service...");
	//  Turning on the Authentication by default
	application.HTMLDomainsAuth =	true;
	application.SWFDomainsAuth =	true;
	
	// Populating the list of domains which are allowed to host HTML file
	// which in turn may embed a SWF that connects to this application
	application.allowedHTMLDomains = readValidDomains("allowedHTMLdomains.txt", "HTMLDomains");

	// Populating the list of domains which are allowed to host a SWF file
	// which may connect to this application
	application.allowedSWFDomains = readValidDomains("allowedSWFdomains.txt", "SWFDomains");
	
	// Logging
	if(application.HTMLDomainsAuth){
		trace("Authentication of HTML page URL domains is enabled");
	}
	if(application.SWFDomainsAuth){
		trace("Authentication of SWF URL domains is enabled");
	}
	trace("...loading completed.");
}

/*
* Implementation of the onConnect interface function (optional). 
* it is invoked whenever a client connection request connection. App uses this 
* function to authenticate the domain of connection and authorizes only 
* for a subscriber request.
*/
application.onConnect = function(client) {
	// Authenticating HTML file's domain for the request :
	// Don't call validate() when the request is from localhost 
	// or HTML Domains Authentication is off.
	if ((client.ip != "127.0.0.1") && application.HTMLDomainsAuth 
			&&  !validate( client.pageUrl, application.allowedHTMLDomains ) )
	{
		trace("Authentication failed for pageurl: " + client.pageUrl + ", rejecting connection from "+client.ip);
		return false;
	}

	// Authenticating the SWF file's domain for the request :
	// Don't call validate() when the request is from localhost 
	// or SWF Domains Authentication is off.
	if ((client.ip != "127.0.0.1") && application.SWFDomainsAuth 
			&&  !validate( client.referrer, application.allowedSWFDomains ) )
	{
		trace("Authentication failed for referrer: " + client.referrer + ", rejecting connection from "+client.ip);
		return false;
	}
	
	// As default, all clients are disabled to access raw audio and video and data bytes in a stream 
	// through the use of BitmapData.draw() and SoundMixer.computeSpectrum()., Please refer
	// Stream Data Access doccumentations to know flash player version requirement to support this restriction
	// Access permissions can be allowed for all by uncommenting the following statements
	
	//client.audioSampleAccess = "/";
 	//client.videoSampleAccess = "/";	

	application.acceptConnection(client);
	
	// Logging
	trace("Accepted a connection from IP:"+ client.ip 
					+ ", referrer: "+ client.referrer
					+ ", pageurl: "+ client.pageUrl);
}

/*
* Validate a given URL by matching through a list of allowed patterns.
* 
* @param url contains the input url string.
* @param patterns an array of permmited url patterns.
* 
* @return 
* 	true; when 'url domain" contains a listed domains as a suffix.
* 	false; otherwise.
*/
function validate(url, patterns)
{
	// Convert to lower case
	url = url.toLowerCase();
	var domainStartPos = 0; // domain start position in the URL
	var domainEndPos = 0; 	// domain end position in the URL
	
	switch (url.indexOf( "://" )) 
	{
		case 4:
			if(url.indexOf( "http://" ) ==0)
				domainStartPos = 7;
			break;
		case 5:
			if(url.indexOf( "https://" ) ==0)
				domainStartPos = 8;
			break;
	}
	if(domainStartPos == 0) {
		// URL must be HTTP or HTTPS protocol based
		return false;
	}
	
	domainEndPos = url.indexOf("/", domainStartPos);
	if(domainEndPos>0) {
		colonPos = url.indexOf(":", domainStartPos); 
		if( (colonPos>0) && (domainEndPos > colonPos)) {
			// probably URL contains a port number
			domainEndPos = colonPos; // truncate the port number in the URL
		}
	}
	
	for ( var i = 0; i < patterns.length; i++ ) {
		var pos = url.lastIndexOf( patterns[i]);
		if ( (pos > 0) && (pos  < domainEndPos) && (domainEndPos == (pos + patterns[i].length)) )
			return true;
	}
	
	return false;
}

/*
* Function to read Allowed domain file 
* 
* @param fileName name of the file in the application directory
* which contains one valid domain name per line. This file can contain
* comments followed by a '#' as the very first charector in that line. 
* a non-comment entry with a space is considered as an error case.
*  
* @return an array in which each entry contains a domain name listed in the file.
*/
function readValidDomains(fileName, domainsType)
{
	var domainFile = new File(fileName);
	var domainsArray = new Array();
	var index = 0;
	var lineCount = 0;
	var tempLine;
	domainFile.open("text", "read"); 
	
	// Read the file line-by-line and fill the domainsArray 
	// with valid entries
	while (domainFile.isOpen && ! domainFile.eof())
	{		
		tempLine = domainFile.readln();
		lineCount++;
		if(!tempLine  || tempLine.indexOf("#") == 0) {
			continue;
		}
		tempLine = tempLine.trim();
		if(tempLine.indexOf(" ")!=-1) {
			trace("undesired <space>, domain entry ignored. "+fileName+":"+(lineCount+1));
		} else {
			domainsArray[index] =  tempLine.toLowerCase();
			index++;
			
			if(tempLine == "*") {
				switch (domainsType) {
					case "HTMLDomains":
						trace ("Found wildcard (*) entry: disabling authentication for HTML file domains ")	;
						application.HTMLDomainsAuth =	false;		
						break;					
					case "SWFDomains":
						trace ("Found wildcard (*) entry: disabling authentication for SWF file domains ")	;
						application.SWFDomainsAuth =	false;		
						break;						
					default: break;	
				}
			}
		}
	}
	
	// Something is wrong! the domains file must be accessible.
	if(!domainFile.isOpen) {
		trace("Error: could not open '"+fileName+"', rejecting all clients except localhost. ");
	}
	else {
		domainFile.close();
	}

	return domainsArray;
}

/*
* Public API to return URL of the HTML page.
*/
Client.prototype.getPageUrl = function() {
	return this.pageUrl;
}

/*
* Public API to return Domain URL of the client SWF file.
*/
Client.prototype.getReferrer = function() {
	return this.referrer;
}

/*
* Function to return the total length of the stream
*/
Client.prototype.getStreamLength = function(p_streamName) {
	return Stream.length(p_streamName);
}

/*
* When FME connection to FMS drops during a publishing session it will
* try and republish the stream when connection is restored. On certain
* occasions FMS will reject the new stream because server is still 
* unaware of the connection drop, sometimes this can take a few minutes.
* FME calls "releaseStream" method with the stream name and this can be
* used to forcibly clear the stream.
*/ 
Client.prototype.releaseStream = function(streamname) {
	 s = Stream.get(streamname);
	 s.play(false);
}

/**
* Function to trim spaces in start an end of an input string.
* 
* @returns a trimmed string without any leading & ending spaces. 
*/
String.prototype.trim = function () {
	return this.replace(/^\s*/, "").replace(/\s*$/, "");
}